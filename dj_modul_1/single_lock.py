#–ó–∞–¥–∞—á–∞ - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ª–æ–∫
# –£ –≤–∞—Å –µ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ –Ω–∞ –¥–µ—Å—è—Ç–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä single –∫–æ—Ç–æ—Ä—ã–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
#
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# ocessing_time —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.

import functools
import datetime
import redis
import time
import uuid

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–µ–±—è)
redis_client = redis.Redis(host="localhost", port=6379, db=0)


def single(max_processing_time: datetime.timedelta):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            lock_key = f"single_lock:{func.__module__}.{func.__name__}"
            lock_value = str(uuid.uuid4())  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞

            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ª–æ–∫ (SETNX + TTL)
            acquired = redis_client.set(
                name=lock_key,
                value=lock_value,
                nx=True,  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á–∞ –µ—â—ë –Ω–µ—Ç
                ex=int(max_processing_time.total_seconds()),  # —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            )

            if not acquired:
                print(f"‚è≥ –§—É–Ω–∫—Ü–∏—è {func.__name__} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≥–¥–µ-—Ç–æ –µ—â—ë")
                return None

            try:
                return func(*args, **kwargs)
            finally:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ª–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –µ–≥–æ –¥–µ—Ä–∂–∏–º
                val = redis_client.get(lock_key)
                if val and val.decode() == lock_value:
                    redis_client.delete(lock_key)

        return wrapper

    return decorator


# === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
@single(max_processing_time=datetime.timedelta(minutes=2))
def process_transaction():
    print("üöÄ –°—Ç–∞—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    time.sleep(5)
    print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    process_transaction()
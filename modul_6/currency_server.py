
# –∑–∞–ø—É—Å—Ç–∏–≤ –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Ñ–∞–π–ª–µ, –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –ø–æ http://127.0.0.1:8000/USD
# 3 —Å–∏–º–≤–æ–ª–∞ –ø–æ—Å–ª–µ —Å–ª–µ—à–∞ –æ–∑–Ω–∞—á–∞—é—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã

# –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å tkinter_currency —É–≤–∏–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
import http.server
import socketserver
import urllib.request
import urllib.error
import json
from urllib.parse import urlparse
import sys

PORT = 8000  # –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –ª—é–±–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç


class CurrencyHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        # –†–∞–∑–±–∏—Ä–∞–µ–º –ø—É—Ç—å –±–µ–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        path = urlparse(self.path).path  # —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –¥–æ ?
        currency = path.strip("/").upper()

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º favicon.ico
        if currency == "FAVICON.ICO":
            self.send_response(204)  # No Content
            self.end_headers()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–∞–ª—é—Ç—ã: —Ä–æ–≤–Ω–æ 3 –±—É–∫–≤—ã
        if not (currency.isalpha() and len(currency) == 3):
            self.send_response(400)
            self.send_header("Content-Type", "application/json; charset=utf-8")
            self.send_header("Access-Control-Allow-Origin", "*")
            self.end_headers()
            self.wfile.write(
                json.dumps({"error": "Invalid currency code"}, ensure_ascii=False).encode("utf-8")
            )
            return

        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
            url = f"https://api.exchangerate-api.com/v4/latest/{currency}"
            with urllib.request.urlopen(url, timeout=5) as response:
                data = response.read().decode("utf-8")
                json_data = json.loads(data)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            json_data["provider"] = "https://www.exchangerate-api.com"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header("Content-Type", "application/json; charset=utf-8")
            self.send_header("Access-Control-Allow-Origin", "*")
            self.end_headers()
            self.wfile.write(json.dumps(json_data, ensure_ascii=False).encode("utf-8"))

        except urllib.error.HTTPError as e:
            self.send_response(e.code)
            self.send_header("Content-Type", "application/json; charset=utf-8")
            self.send_header("Access-Control-Allow-Origin", "*")
            self.end_headers()
            self.wfile.write(
                json.dumps(
                    {"error": f"Currency not found or API error: {e.reason}"},
                    ensure_ascii=False,
                ).encode("utf-8")
            )
        except Exception as e:
            self.send_response(500)
            self.send_header("Content-Type", "application/json; charset=utf-8")
            self.send_header("Access-Control-Allow-Origin", "*")
            self.end_headers()
            self.wfile.write(
                json.dumps({"error": str(e)}, ensure_ascii=False).encode("utf-8")
            )


if __name__ == "__main__":
    try:
        with socketserver.ThreadingTCPServer(("", PORT), CurrencyHandler) as httpd:
            print(f"‚úÖ Server is running at http://localhost:{PORT}")
            httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë Server stopped by user")
        sys.exit(0)

import os

import csv
import time
import matplotlib.pyplot as plt
from modul_4.function import generate_data, save_results_to_json
from multiproc_concurrent_queue import process_with_queue, process_with_threads, process_with_pool, process_single_thread


DATA_SIZE = 1000000


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def benchmark():
    data = generate_data(DATA_SIZE)
    print(f"üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∏—Å–µ–ª")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã
    variants = {
        "1. –û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–π": process_single_thread,
        "2. ThreadPool (–ø–æ—Ç–æ–∫–∏)": process_with_threads,
        "3. Process+Queue": process_with_queue,
        "4. ProcessPool": process_with_pool
    }

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    timings = {}
    results = {}

    print("\n‚è≥ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    for name, func in variants.items():
        start_time = time.perf_counter()
        res = func(data)
        elapsed = time.perf_counter() - start_time
        timings[name] = elapsed
        results[name] = res
        print(f"{name}: {elapsed:.2f} —Å–µ–∫")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not os.path.exists('results'):
        os.makedirs('results')

    save_results_to_json('results/benchmark_results.json', data, results["4. ProcessPool"])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV
    with open('results/benchmark_timings.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['–ú–µ—Ç–æ–¥', '–í—Ä–µ–º—è (—Å–µ–∫)', '–£—Å–∫–æ—Ä–µ–Ω–∏–µ'])
        base_time = timings["1. –û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–π"]
        for name, time_ in timings.items():
            writer.writerow([name, f"{time_:.2f}", f"{base_time / time_:.1f}x"])

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(12, 6))
    names = list(timings.keys())
    times = list(timings.values())

    bars = plt.barh(names, times, color=[
        '#FF6B6B', '#4ECDC4', '#45B7D1', '#88D8B0'
    ])
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    plt.xlabel('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)')
    plt.grid(axis='x', linestyle='--', alpha=0.7)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
    for bar in bars:
        width = bar.get_width()
        plt.text(width + 0.1, bar.get_y() + bar.get_height() / 2,
                 f'{width:.2f} —Å–µ–∫',
                 va='center')

    plt.tight_layout()
    plt.savefig('results/benchmark_chart-1.png', dpi=120)
    plt.show()
    plt.close()

    print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'results':")
    print("- benchmark_results.json (–æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö)")
    print("- benchmark_timings.csv (—Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
    print("- benchmark_chart.png (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)")

if __name__ == '__main__':
    benchmark()